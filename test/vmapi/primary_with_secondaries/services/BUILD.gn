# Copyright 2018 The Hafnium Authors.
#
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/BSD-3-Clause.

import("//build/image/image.gni")

# Service to expose race conditions when running a vCPU.
source_set("check_state") {
  testonly = true
  public_configs = [ "//test/hftest:hftest_config" ]

  sources = [ "check_state.c" ]

  deps = [ "//src/arch/aarch64/hftest:state" ]
}

# Service to try to access EL1 debug registers.
source_set("debug_el1") {
  testonly = true
  public_configs = [ "//test/hftest:hftest_config" ]

  sources = [ "debug_el1.c" ]
}

# Service to try to access performance monitor registers.
source_set("perfmon") {
  testonly = true
  public_configs = [ "//test/hftest:hftest_config" ]

  sources = [ "perfmon.c" ]
}

# Service to listen for messages and echo them back to the sender.
source_set("echo") {
  testonly = true
  public_configs = [ "//test/hftest:hftest_config" ]

  sources = [ "echo.c" ]
}

# Service for floating point register save/restore checks.
source_set("floating_point") {
  testonly = true
  public_configs = [ "//test/hftest:hftest_config" ]

  sources = [ "floating_point.c" ]

  deps = [ "//src/arch/aarch64/hftest:registers" ]
}

# Services related to memory sharing.
source_set("memory") {
  testonly = true
  public_configs = [
    "..:config",
    "//test/hftest:hftest_config",
  ]
  deps = [
    "//test/vmapi/common:ffa",
    "//test/vmapi/primary_with_secondaries:primary_with_secondaries",
    "//vmlib",
  ]

  sources = [ "memory.c" ]
}

# Services related to VMs that access unmapped memory.
source_set("unmapped") {
  testonly = true
  public_configs = [ "//test/hftest:hftest_config" ]

  sources = [ "unmapped.c" ]

  deps = [ "//test/vmapi/common:ffa" ]
}

# Services related to the boot process for VMs.
source_set("boot") {
  testonly = true
  public_configs = [ "//test/hftest:hftest_config" ]

  sources = [ "boot.c" ]

  deps = [ "//test/vmapi/common:ffa" ]
}

# Service that can be interrupted.
source_set("interruptible") {
  testonly = true
  public_configs = [
    "..:config",
    "//test/hftest:hftest_config",
  ]

  sources = [
    "interruptible.c",
    "interruptible_echo.c",
  ]

  deps = [ "//src/arch/aarch64/hftest:interrupts" ]
}

# Service to check that hf_mailbox_receive can't block when there are pending
# interrupts.
source_set("receive_block") {
  testonly = true
  public_configs = [
    "..:config",
    "//test/hftest:hftest_config",
  ]
  sources = [ "receive_block.c" ]
  deps = [
    "//src/arch/aarch64:arch",
    "//src/arch/aarch64/hftest:interrupts",
    "//test/vmapi/common:ffa",
  ]
}

# Service to listen for messages and forward them on to another.
source_set("relay") {
  testonly = true
  public_configs = [ "//test/hftest:hftest_config" ]

  sources = [ "relay.c" ]
}

# Service to wait for a message but expect never to get one.
source_set("run_waiting") {
  testonly = true
  public_configs = [ "//test/hftest:hftest_config" ]

  sources = [ "run_waiting.c" ]
}

# Service to start a second vCPU and send messages from both.
source_set("smp") {
  testonly = true
  public_configs = [
    "..:config",
    "//test/hftest:hftest_config",
  ]
  sources = [ "smp.c" ]
}

# Service to check that WFI is a no-op when there are pending interrupts.
source_set("wfi") {
  testonly = true
  public_configs = [
    "..:config",
    "//test/hftest:hftest_config",
  ]
  sources = [ "wfi.c" ]
  deps = [ "//src/arch/aarch64/hftest:interrupts" ]
}

# Service to receive messages in a secondary VM and ensure that the header fields are correctly set.
source_set("ffa_check") {
  testonly = true
  public_configs = [
    "..:config",
    "//test/hftest:hftest_config",
  ]
  deps = [ "//test/vmapi/common:ffa" ]

  sources = [
    "dir_msg.c",
    "ffa_check.c",
  ]
}

# Group services together into VMs.

vm_kernel("service_vm1") {
  testonly = true

  deps = [
    ":boot",
    ":check_state",
    ":debug_el1",
    ":echo",
    ":ffa_check",
    ":floating_point",
    ":interruptible",
    ":memory",
    ":perfmon",
    ":receive_block",
    ":relay",
    ":run_waiting",
    ":unmapped",
    ":wfi",
    "//src/arch/aarch64/hftest:interrupts",
    "//src/arch/aarch64/hftest:mm",
    "//test/hftest:hftest_secondary_vm",
    "//test/vmapi/common/arch/aarch64:exception_handler",
    "//test/vmapi/primary_with_secondaries:primary_with_secondaries",
  ]
}

vm_kernel("service_vm2") {
  testonly = true

  deps = [
    ":echo",
    ":ffa_check",
    ":interruptible",
    ":memory",
    ":relay",
    "//src/arch/aarch64/hftest:interrupts",
    "//src/arch/aarch64/hftest:mm",
    "//test/hftest:hftest_secondary_vm",
    "//test/vmapi/common/arch/aarch64:exception_handler",
    "//test/vmapi/primary_with_secondaries:primary_with_secondaries",
  ]
}

vm_kernel("service_vm3") {
  testonly = true

  deps = [
    ":echo",
    ":ffa_check",
    ":smp",
    "//test/hftest:hftest_secondary_vm",
    "//test/vmapi/common/arch/aarch64:exception_handler",
    "//test/vmapi/primary_with_secondaries:primary_with_secondaries",
  ]
}
